package com.acme.rfc1662;

import java.io.ByteArrayInputStream;

import org.junit.Assert;
import org.junit.Test;

import com.acme.rfc1662.enums.DefaultProtocol;
import com.acme.rfc1662.enums.FrameCheckSequence;

/**
 * This test file contains random messages which were able to break the decoder
 * code
 *
 */
public class RandomBreakingMessagesDecodeTest {

    private final PPPCodec codec = new PPPCodec(DefaultProtocol.TWO_OCTET, FrameCheckSequence.TWO_OCTET);

    @Test
    public void testEncodeDecode() {
        final byte[] message = codec.encode(new byte[] { (byte) 0x9a, (byte) 0x46 });

        final ParserResult result = codec.decode(new ByteArrayInputStream(message));

        Assert.assertNotNull(result);
        Assert.assertEquals(1, result.messages().size());
    }

    @Test
    public void testEncodeDecode2() {
        final byte[] message = codec.encode(new byte[] { (byte) 0x7E });

        final ParserResult result = codec.decode(new ByteArrayInputStream(message));

        Assert.assertNotNull(result);
        Assert.assertEquals(1, result.messages().size());
    }

//	@Test
//	public void testEncodeDecode3() {
//
//		ParserResult result = codec.decode(join(new int[] { 0xF0, 0x62, 0x64, 0x74, 0x3F, 0xC5, 0xFD, 0x19, 0xC4, 0x5F, 0x46, 0x7C, 0x2D,
//				0x0B, 0xF7, 0x50, 0x86, 0xF0, 0xE2, 0xFC, 0xF3, 0x1B, 0x36, 0x8B, 0x0F, 0xA2, 0x70, 0x94, 0x65, 0x07, 0x9D, 0x60, 0xD9,
//				0x1A, 0x93, 0x6A, 0xF6, 0x36, 0x59, 0x28, 0x83, 0x6C, 0x73, 0xA1, 0x88, 0x97, 0x17, 0x4B, 0x27, 0x5E, 0x24, 0xDB, 0x0D,
//				0xE1, 0x97, 0x08, 0x04, 0x95, 0x48, 0x92, 0x34, 0x19, 0x4D, 0x97, 0x16, 0xC3, 0xCB, 0x5A, 0xBB, 0x23, 0x9A, 0xA3, 0x86,
//				0xAF, 0x04, 0xBF, 0x23, 0x0A, 0x78, 0x9D, 0x1C, 0x13, 0xBB, 0xA1, 0xD2, 0x6D, 0x7E, 0xFF, 0x7D, 0x23, 0x01, 0x02, 0xE7,
//				0x3D, 0xE5, 0x7E, 0x4D, 0x0F, 0xE4, 0xA9, 0x24, 0xEB, 0xDE, 0x53, 0xD6, 0xE8, 0x2A, 0x2C, 0x61, 0x2C, 0x3E, 0x6F, 0x5D,
//				0x1E, 0x85, 0x07, 0xF5, 0xF8, 0x95, 0x2A, 0x42, 0x6B, 0x92, 0x14, 0x97, 0x1B, 0x35, 0x2C, 0xC1, 0x19, 0xB1, 0x3B, 0x78,
//				0xE9, 0xAA, 0x03, 0xED, 0x1F, 0x64, 0xC2, 0x57, 0x9E, 0x79, 0xD8, 0x5A, 0xDC, 0x62, 0x2C, 0x46, 0x23, 0xF3, 0x96, 0xBB,
//				0x12, 0x58, 0xD2, 0xBB, 0x2E, 0x06, 0x58, 0xFE, 0xB5, 0xE1, 0x15, 0xE1, 0x30, 0x7D, 0xCB, 0xA9, 0xDC, 0x0B, 0x90, 0x42,
//				0x3D, 0x44, 0xBE, 0x8B, 0xBD, 0xD6, 0x29, 0x3D, 0xAB, 0xD2, 0x9D, 0xFD, 0x15, 0x76, 0xE2, 0xF4, 0x88, 0xBE, 0x13, 0x3F,
//				0xB0, 0x9C, 0x70, 0x82, 0xC8, 0x0F, 0x8B, 0xC8, 0x55, 0xDE, 0x87, 0x47, 0xF2, 0xDD, 0x7E, 0xFF, 0x7D, 0x23, 0x01, 0x02,
//				0x67, 0x35, 0x61, 0x7E, 0x95, 0x84, 0xB9, 0x2E, 0xC3, 0x0C, 0xC0, 0x7C, 0xD7, 0xAF, 0x7D, 0xF5, 0x78, 0xD5, 0x5A, 0xF4,
//				0xF6, 0x03, 0xE1, 0xA1, 0x77, 0xC2, 0xED, 0xA7, 0x8B, 0x2E, 0x1E, 0x57, 0xED, 0x49, 0xBA, 0x8A, 0x63, 0x05, 0xAF, 0x06,
//				0xCE, 0x93, 0xC2, 0x8A, 0x0E, 0x74, 0xAE, 0xF1, 0x41, 0x03, 0xD5, 0xC3, 0x96, 0x63, 0x56, 0x28, 0x30, 0xB3, 0xC1, 0xAE,
//				0xAF, 0x00, 0x9D, 0xCF, 0xAE, 0x48, 0xA4, 0x64, 0xE0, 0x51, 0x40, 0x93, 0x13, 0x22, 0x3F, 0x0C, 0x74, 0x7E, 0x10, 0x83,
//				0xF7, 0xC7, 0x74, 0x0F, 0x39, 0x48, 0xB8, 0x2D, 0x7C, 0x2D, 0x1D, 0x7C, 0x4F, 0x5D, 0x24, 0x13, 0x84, 0xCF, 0xFB, 0xD2,
//				0x98, 0x1C, 0x62, 0x07, 0xC4, 0xAE, 0x46, 0x59, 0x8F, 0x7E, 0xD6, 0x3F, 0xD1, 0x86, 0x83, 0x45, 0x85, 0xDD, 0xE7, 0x59,
//				0x9F, 0x14, 0x86, 0xD5, 0x99, 0xA3, 0x5F, 0x9B, 0x09, 0xC9, 0xF7, 0xE8, 0xEB, 0x41, 0x12, 0x76, 0x5A, 0x78, 0xD5, 0xD0,
//				0xD7, 0x93, 0x17, 0xBD, 0xED, 0x85, 0x13, 0x65, 0x32, 0xC2, 0x57, 0x58, 0x63, 0x43, 0x44, 0x21, 0xEF, 0x2D, 0xA1, 0x3E,
//				0xFB, 0xCC, 0x88, 0xDE, 0x8D, 0xAE, 0x1B, 0x3C, 0x0E, 0x29, 0x53, 0x60, 0x38, 0xD8, 0x29, 0x07, 0xCB, 0xE6, 0xFB, 0x42,
//				0x90, 0xD6, 0x97, 0xAE, 0x95, 0xBB, 0x20, 0x4C, 0x5C, 0x04, 0x96, 0x00, 0x1F, 0x61, 0x0B, 0x43, 0x58, 0x93, 0xBA, 0xD3,
//				0xE5, 0xCE, 0x2E, 0x2B, 0x58, 0xFE, 0x5A, 0x1C, 0x92, 0x87, 0x53, 0x1E, 0xF5, 0x50, 0x5F, 0xAB, 0x5F, 0xD1, 0x47, 0xAE,
//				0xC5, 0x2E, 0xF9, 0x84, 0x21, 0x94, 0x4E, 0x16, 0x5E, 0x3C, 0x29, 0x5E, 0xE2, 0xBF, 0x5F, 0x92, 0xD7, 0x74, 0x5E, 0x5A,
//				0x0B, 0x8D, 0x60, 0xC8, 0x84, 0xA4, 0xF9, 0xF6, 0x78, 0x66, 0x24, 0x9F, 0xA1, 0xB8, 0x7C, 0x93, 0xE3, 0x31, 0x5B, 0x52,
//				0x97, 0x7D, 0x8C, 0xD1, 0xFC, 0x49, 0xA0, 0x2A, 0x90, 0xFA, 0x7C, 0x93, 0x9D, 0x80, 0x35, 0x2D, 0x8F, 0x97, 0x33, 0x4B,
//				0x0F, 0xC8, 0xA7, 0x79, 0x2C, 0xA7, 0x8F, 0x76, 0xA0, 0x80, 0x37, 0x7D, 0xBE, 0x12, 0x91, 0xE7, 0x9C, 0x7E, 0x74, 0xD7,
//				0x6D, 0x2F, 0xEE, 0xEA, 0x7B, 0x3E, 0x9E, 0x52, 0x94, 0x10, 0x05, 0xE2, 0x2B, 0xEA, 0x12, 0x01, 0x10, 0x7E, 0xFF, 0x7D,
//				0x23, 0x01, 0x02, 0x12, 0x1F, 0x45, 0x7E, 0x50, 0x86, 0x27, 0x42, 0xC3, 0xE3, 0x9D, 0x0D, 0x27, 0xD9, 0x6B, 0x7C, 0x2A,
//				0xC0, 0xE1, 0x11, 0xE1, 0xC6, 0x95, 0x38, 0x67, 0x2A, 0x78, 0x19, 0x3A, 0x58, 0x7F, 0x15, 0x6E, 0xF6, 0x84, 0xE8, 0x19,
//				0xFE, 0x35, 0xDC, 0xFC, 0x37, 0x79, 0x24, 0xA2, 0xE3, 0xBB, 0x60, 0xB2, 0xA3, 0x72, 0x9D, 0x68, 0xA5, 0x03, 0xC1, 0x63,
//				0x3E, 0xF1, 0x16, 0x8F, 0x26, 0x32, 0x6C, 0x73, 0x85, 0xE1, 0xE4, 0x14, 0x6B, 0x2E, 0x5D, 0x35, 0x6C, 0xE6, 0xD1, 0x96,
//				0xD6, 0xC4, 0x8C, 0xAC, 0x3D, 0x04, 0x98, 0x5D, 0x01, 0x8C, 0xF8, 0x1A, 0x77, 0xD4, 0x8F, 0x6C, 0x11, 0x6E, 0x03, 0x46,
//				0x57, 0x80, 0xCE, 0xE1, 0x3B, 0x35, 0x25, 0x5B, 0xF7, 0x29, 0x38, 0xF1, 0x52, 0x56, 0xEE, 0xCE, 0x9D, 0xEC, 0x69, 0x41,
//				0x1F, 0x0D, 0x99, 0xB4, 0x68, 0x07, 0xF9, 0x70, 0x47, 0x56, 0xF5, 0x68, 0xBC, 0xB0, 0xFA, 0x05, 0xC7, 0xB6, 0xAA, 0x6F,
//				0xE4, 0xAC, 0x0E, 0x25, 0xFE, 0x4C, 0xAB, 0x03, 0x58, 0xCB, 0xAC, 0xBC, 0x45, 0x69, 0x5D, 0xAD, 0xE8 }));
//
//		Assert.assertNotNull(result);
//		Assert.assertEquals(1, result.messages().size());
//
////				Message content was = E7
////				message = 7E FF 7D 23 01 02 E7 3D E5 7E
////				Creating message of content length = 1
////				Message content was = 67
////				message = 7E FF 7D 23 01 02 67 35 61 7E
//		// stream =
////				Creating message of content length = 1
////				Message content was = 12
////				message = 7E FF 7D 23 01 02 12 1F 45 7E
//
//	}

}
