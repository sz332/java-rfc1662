package com.acme.rfc1662;

import static com.acme.rfc1662.IntArray.join;

import org.junit.Assert;
import org.junit.Test;

import com.acme.rfc1662.enums.DefaultProtocol;
import com.acme.rfc1662.enums.FrameCheckSequence;

/**
 * This test file contains random messages which were able to break the decoder code
 *
 */
public class RandomBreakingMessagesDecodeTest {

	private PPPCodec codec = new PPPCodec(DefaultProtocol.TWO_OCTET, FrameCheckSequence.TWO_OCTET);

	@Test
	public void testMessage1() {

		ParserResult result = codec.decode(join(new int[] { 0x7B, 0x89, 0xAE, 0xEB, 0xAA, 0x83, 0xBE, 0x71, 0xF0, 0xB6, 0xA6, 0xDC, 0xED,
				0x93, 0x6D, 0x2F, 0x6B, 0x28, 0x28, 0x70, 0xEE, 0x66, 0xA2, 0xEB, 0x79, 0x3A, 0x39, 0xAE, 0xC8, 0x91, 0x7E, 0x4B, 0xA8,
				0xDD, 0x15, 0xE1, 0xFE, 0xFD, 0x44, 0x8B, 0xFD, 0x37, 0x19, 0xAC, 0xBC, 0xBC, 0xFF, 0xFE, 0xDB, 0x80, 0xDB, 0x86, 0x36,
				0x42, 0x10, 0x08, 0x44, 0x3F, 0x64, 0xBA, 0xEE, 0x76, 0xD5, 0x95, 0x9A, 0x58, 0xF0, 0xF9, 0xE4, 0x75, 0x81, 0xC6, 0x4D,
				0xAE, 0xDD, 0x75, 0xF9, 0x79, 0x1E, 0x15, 0x11, 0x73, 0xF3, 0xEA, 0x1A, 0x3A, 0xA6, 0x3F, 0x96, 0x74, 0x3D, 0x9D, 0xDE,
				0x12, 0xDC, 0xCF, 0xDD, 0x64, 0x7E, 0xFF, 0x7D, 0x23, 0x01, 0x02, 0x9A, 0x46, 0x1D, 0xE4, 0x7E, 0x3B, 0x92, 0x92, 0x23,
				0xFE, 0xE9, 0x9D, 0x7A, 0x9A, 0x05, 0x7F, 0xBD, 0xB6, 0x05, 0x21, 0xCB, 0x61, 0x66, 0x4B, 0x31, 0x9F, 0x6F, 0x9B, 0xB0,
				0xA0, 0x5F, 0xDF, 0x6A, 0xC2, 0x0B, 0xBC, 0x95, 0x2B, 0x1D, 0x22, 0x01, 0x19, 0x5A, 0xAD, 0xC5, 0xC0, 0xEB, 0x13, 0x00,
				0x84, 0xDA, 0xFB, 0x0B, 0xFA, 0x02, 0xCE, 0xF8, 0x85, 0x6B, 0x88, 0x9A, 0xA0, 0x46, 0xEC, 0xA2, 0x0E, 0x89, 0x10, 0x53,
				0xD9, 0x4E, 0x76, 0x55, 0xF8, 0x45, 0xD0, 0x8F, 0x3B, 0xF3, 0x21, 0xEA }));

		Assert.assertNotNull(result);
		Assert.assertEquals(1, result.messages().size());
	}

}
